[[http://melpa.org/#/haskell-emacs][file:http://melpa.org/packages/haskell-emacs-badge.svg]]

* What is it?
=haskell-emacs= is a library which allows extending emacs in haskell.
It provides an FFI (foreign function interface) for haskell functions.

* Examples
Consider that you've got the following toy program:

#+BEGIN_SRC haskell
-- /home/foo/.emacs.d/haskell-fun/Matrix.hs
module Matrix (identity,isIdentity,dyadic,transpose) where

import qualified Data.List as L

transpose :: [[Int]] -> [[Int]]
transpose = L.transpose

identity :: Int -> [[Int]]
identity n
  | n > 1 = L.nub $ L.permutations $ 1 : replicate (n-1) 0
  | otherwise = [[1]]

isIdentity :: [[Int]] -> Bool
isIdentity xs = xs == identity (length xs)

dyadic :: [Int] -> [Int] -> [[Int]]
dyadic xs ys = map (\x -> map (x*) ys) xs
#+END_SRC

Add the directory of =haskell-emacs= to your emacs load path:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/git/haskell-emacs/")
#+END_SRC

Start your emacs and evaluate following expression (and put it in
your .emacs if you like):
#+BEGIN_SRC emacs-lisp
(require 'haskell-emacs)
(haskell-emacs-init)
#+END_SRC
Note that it is not sufficient to evaluate the buffer of the source
file, it has to know where some haskell glue code is located and uses
therefore =load-file-name=, so you have to load or require it, and the
glue code must be in the same directory (which is the case if you
simply clone the repo).

Now you're set to toy around with your new elisp functions:
#+BEGIN_SRC emacs-lisp
(Matrix.identity 3)
  => ((1 0 0) (0 1 0) (0 0 1))

(Matrix.transpose '((1 2) (3 4) (5 6)))
  => ((1 3 5) (2 4 6))

(Matrix.isIdentity '((1 0) (0 1)))
  => t

(Matrix.dyadic '(1 2 3) '(4 5 6))
  => ((4 5 6) (8 10 12) (12 15 18))
#+END_SRC

Now consider some bad input:
#+BEGIN_SRC emacs-lisp
(Matrix.identity "a")
  => Debugger entered--Lisp error: (error "when expecting a Integral, encountered string instead")

(Matrix.transpose [(1 2) [3 4]])
  => ((1 3) (2 4))

(Matrix.dyadic '+)
  => Debugger entered--Lisp error: (error "when expecting a pair, encountered symbol instead")
#+END_SRC

You see that type errors get errors in emacs with good descriptions of
the error.  It puts only an error, if the parser doesn't find a
transformation of your proposed input to the required type of the
haskell function.  Arrays will be translated (recursively) to Lists,
and Lists can represent Lists or Tuples.

* Performance
There is a (very) small overhead calling haskell functions, so for very
trivial situations, elisp functions will be faster.  On my laptop
(i5-4210, 2.7Ghz) it costs the following:
- 0.07 ms per function call
- 0.0002 ms per sended or received char

Unless you use haskell functions on megabytes of text or in very tight
loops (which wouldn't be wise, transfer the whole task to haskell) the
overhead is irrelevant.

Additionally, if you watch close, haskell functions will recursively
fuse with any of its arguments which are haskell functions so you can
define quite modular haskell functions and combine them on the lisp
side and pay *only one time* the overhead.

#+BEGIN_SRC emacs-lisp
  (Matrix.transpose (Matrix.transpose '((1 2) (3 4))))
     => ((1 2) (3 4))

  (Matrix.transpose (identity (Matrix.transpose '((1 2) (3 4)))))
     => ((1 2) (3 4))

  (let ((result (Matrix.transpose-async (Matrix.transpose '((1 2) (3 4))))))

    ;; other stuff

    (eval result))
     => ((1 2) (3 4))
#+END_SRC

In the upper example, the first and the third one is twice as fast as
the second one.  In the second case, the identity function does
nothing, but prevents the haskell functions to fuse.  The result is
the same, but the intermediate result must be send over pipes back to
emacs and from emacs back to haskell.  Obviously, fusioning synchronous
functions gives only (huge) performance benefits for functions, where
the overhead is the performance bottleneck.

The third case is an async function (which can fuse as well) which
returns a future without blocking emacs.  Evaluating the future will
return the result of the computation, or block and wait if it isn't
already present.  Especially for async functions, the ability to fuse
is quite powerful:  You can glue together for example 4 costly
computations which will execute all on the haskell side without
the need to manually block for intermediate results.

Considering big intermediate results (lets say an entire buffer), it's
possible that fused functions are orders of magnitude faster by
omitting the performance costs per char.

Every branch of a fused function will be evaluated in parallel on
multiple cores, so if you call a function asynchronously which takes
as arguments three haskell functions, your call will be evaluated on
up to three cores in parallel and without blocking emacs.

* Documentation
Document your haskell functions!  The haddock strings will be parsed
and put as the documentation for the elisp wrappers, so they are
anytime available.  In any case, the emacs docs (C-h f) will show the
arity and the type of the haskell functions.  Furthermore, it will
indicate where the haskell function is defined and you can jump
directly to that file, just as with elisp functions.  Thanks to an
hack, emacs actually thinks that there resides an elisp function,
which it will obviously not find, so it jumps only to the top of the
module where the haskell function is defined.

#+BEGIN_SRC emacs-lisp
; C-h f Org.parseCsv
Org\.parseCsv is a Lisp macro in `Org.hs'.

(Org\.parseCsv X1)

parseCsv :: T.Text -> T.Text

Parses a string and returns an org-table somewhat
faster (100x) than the corresponding elisp code.
#+END_SRC

Unfortunately, emacs doesn't like dots in function names in the help
buffer.
* Dependencies
You'll need:
- ghc
- attoparsec
- atto-lisp
- parallel
- utf8-string

Thats all.

* Nixos
The integration with NixOS is especially handled: compiling gets done
in a pure =nix-shell= which is customizeable.  You don't need to
install any dependency, it is taken care of by the =nix-shell=.  If
you use in your custom functions other packages, you need to write
these dependencies into the variable =haskell-emacs-nix-shell-args=
(use customize).  If this isn't convenient for your workflow, you can
remove the =--pure= flag from the shell.
* Shortcomings
About 10 types are recognized as input, and about 10 types of output
can be transformed into an elisp type.  Thats quite good, but not
everything.  If you write a function with an unknown type,
=haskell-emacs-init= will signal an error with the output from ghc.

Polymorphic types are not well supported and higher functions aren't
supported at all, you can't pass functions as arguments to haskell
functions in emacs.

If a haskell function crashes haskell-emacs an error will be thrown and
the server process will be restarted immediately.  In this process,
every async call will be obviously lost.

* Contribute
I highly encourage contributions of all sorts.  If you've got anything
that doesn't behave as you like or doesn't exist and you would like to
have it, let me know in an issue and I'll respond asap!
