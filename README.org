[[http://melpa.org/#/haskell-emacs][file:http://melpa.org/packages/haskell-emacs-badge.svg]]

* What is it?
=haskell-emacs= is a library which allows extending emacs in haskell.
It provides an FFI (foreign function interface) for haskell functions.

* Examples
Melpa install =haskell-emacs= (if you're cloning directly the repo,
you have to add the repo to your =load-path= and =(require
'haskell-emacs)=) and run =M-x haskell-emacs-init=.  You'll be asked
an installation dialog.  If you choose so, you'll receive the
following demo library:

#+BEGIN_SRC haskell
-- /home/foo/.emacs.d/haskell-fun/Matrix.hs
module Matrix (identity,isIdentity,dyadic,transpose) where

import qualified Data.List as L

-- | Takes a matrix (a list of lists of ints) and returns its transposition.
transpose :: [[Int]] -> [[Int]]
transpose = L.transpose

-- | Returns an identity matrix of size n.
identity :: Int -> [[Int]]
identity n
  | n > 1 = L.nub $ L.permutations $ 1 : replicate (n-1) 0
  | otherwise = [[1]]

-- | Check whether a given matrix is a identity matrix.
isIdentity :: [[Int]] -> Bool
isIdentity xs = xs == identity (length xs)

-- | Compute the dyadic product of two vectors.
dyadic :: [Int] -> [Int] -> [[Int]]
dyadic xs ys = map (\x -> map (x*) ys) xs
#+END_SRC

Now you're set to toy around with your new elisp functions:
#+BEGIN_SRC emacs-lisp
(Matrix.identity 3)
  => ((1 0 0) (0 1 0) (0 0 1))

(Matrix.transpose '((1 2) (3 4) (5 6)))
  => ((1 3 5) (2 4 6))

(Matrix.isIdentity '((1 0) (0 1)))
  => t

(Matrix.dyadic '(1 2 3) '(4 5 6))
  => ((4 5 6) (8 10 12) (12 15 18))
#+END_SRC

Now consider some bad input:
#+BEGIN_SRC emacs-lisp
(Matrix.identity "a")
  => Debugger entered--Lisp error: (error "when expecting a Integral, encountered string instead")

(Matrix.transpose [(1 2) [3 4]])
  => ((1 3) (2 4))

(Matrix.dyadic '+)
  => Debugger entered--Lisp error: (error "when expecting a pair, encountered symbol instead")
#+END_SRC

You see that type errors get errors in emacs with good descriptions of
the error.  It puts only an error, if the parser doesn't find a
transformation of your proposed input to the required type of the
haskell function.  Arrays will be translated (recursively) to Lists,
and Lists can represent Lists or Tuples.

* Performance
There is a (very) small overhead calling haskell functions, so for very
trivial situations, elisp functions will be faster.  On my laptop
(i5-4210, 2.7Ghz) it costs the following:
- 0.07 ms per function call
- 0.0002 ms per sended or received char

Unless you use haskell functions on megabytes of text or in very tight
loops (which wouldn't be wise, transfer the whole task to haskell) the
overhead is irrelevant.

Additionally, if you watch close, haskell functions will recursively
fuse with any of its arguments which are haskell functions so you can
define quite modular haskell functions and combine them on the lisp
side and pay *only one time* the overhead.

#+BEGIN_SRC emacs-lisp
  (Matrix.transpose (Matrix.transpose '((1 2) (3 4))))
     => ((1 2) (3 4))

  (Matrix.transpose (identity (Matrix.transpose '((1 2) (3 4)))))
     => ((1 2) (3 4))

  (let ((result (Matrix.transpose-async (Matrix.transpose '((1 2) (3 4))))))

    ;; other stuff

    (eval result))
     => ((1 2) (3 4))
#+END_SRC

In the upper example, the first and the third one is twice as fast as
the second one.  In the second case, the identity function does
nothing, but prevents the haskell functions to fuse.  The result is
the same, but the intermediate result must be send over pipes back to
emacs and from emacs back to haskell.  Obviously, fusioning synchronous
functions gives only (huge) performance benefits for functions, where
the overhead is the performance bottleneck.

The third case is an async function (which can fuse as well) which
returns a future without blocking emacs.  Evaluating the future will
return the result of the computation, or block and wait if it isn't
already present.  Especially for async functions, the ability to fuse
is quite powerful:  You can glue together for example 4 costly
computations which will execute all on the haskell side without
the need to manually block for intermediate results.

Considering big intermediate results (lets say an entire buffer), it's
possible that fused functions are orders of magnitude faster by
omitting the performance costs per char.

Every branch of a fused function will be evaluated in parallel on
multiple cores, so if you call a function asynchronously which takes
as arguments three haskell functions, your call will be evaluated on
up to three cores in parallel and without blocking emacs.

* Documentation
Document your haskell functions!  The haddock strings will be parsed
and put as the documentation for the elisp wrappers, so they are
anytime available.  In any case, the emacs docs (C-h f) will show the
arity and the type of the haskell functions.  Furthermore, it will
indicate where the haskell function is defined and you can jump
directly to that file, just as with elisp functions.  Thanks to an
hack, emacs actually thinks that there resides an elisp function,
which it will obviously not find, so it jumps only to the top of the
module where the haskell function is defined.

#+BEGIN_SRC emacs-lisp
; C-h f Matrix.transpose
Matrix\.transpose is a Lisp macro in `Matrix.hs'.

(Matrix\.transpose X1)

transpose :: [[Int]] -> [[Int]]

Takes a matrix (a list of lists of ints) and returns its transposition.
#+END_SRC

Unfortunately, emacs doesn't like dots in function names in the help
buffer.
* Dependencies
You'll need:
- ghc
- cabal
- atto-lisp
- parallel
- utf8-string

Thats all.  If you've got ghc and cabal, the rest will be installed
automatically if you choose so during the setup dialog.
* Nixos
The integration with NixOS is especially handled: compiling gets done
in a =nix-shell= which is customizeable.  You can for example add the
--pure flag and list there all the dependencies.  Obviously, in this
case a cabal sandbox wouldn't make sense.
* Shortcomings
Some types are recognized as input, and some types of output can be
transformed into an elisp object.  Thats quite good, but not
everything.  If you write a function with an unknown type,
=haskell-emacs-init= will signal an error with the output from ghc.

Higher functions aren't supported at all, you can't pass functions as
arguments to haskell functions in emacs.

If you want to write polymorphic functions, you have to use the type
Lisp (which you have to import from atto-lisp), for example:

#+BEGIN_SRC haskell
module Concat (concatElisp) where

import Data.AttoLisp

concatElisp :: [[Lisp]] -> [Lisp]
concatElisp = concat
#+END_SRC

Note that this will work with lists of multiple types:

#+BEGIN_SRC elisp
(Concat.concatElisp '((1 2 3) ("a" "b" "c")))
  => (1 2 3 "a" "b" "c")
#+END_SRC

It is possible to enforce the same type, but that is quite complicated
(look at the definition of =Base.asTypeOf= in this repo for a start).

If a haskell function crashes haskell-emacs an error will be thrown.
In this process, every async call will be obviously lost.
* Modules
If you want to distribute a haskell library for haskell-emacs,
just write an elisp file describing the package and the
corresponding haskell file in the same dir:
#+BEGIN_SRC elisp
;;;; haskell-emacs-pi/haskell-emacs-pi.el

;;; haskell-emacs-pi.el --- return pi

;; Version: 1.0.0
;; Package-Requires: ((haskell-emacs "2.4.0"))

;;; Code:

(require 'haskell-emacs)
(provide 'haskell-emacs-pi)

;;; haskell-emacs-pi.el ends here
#+END_SRC

#+BEGIN_SRC haskell
---- haskell-emacs-pi/Pi.hs

module Pi where (piSquare)

piSquare :: Double
piSquare = pi^2
#+END_SRC

That's all.  You can distribute this package for example via
melpa (don't forget to add the *.hs to the files of the recipe)
or just point your `load-path' to this directory.  If you call
afterwards `haskell-emacs-init', it will automatically find this
module and provide the functions.

If you want to use such functions in your elisp library, do the following:

#+BEGIN_SRC elisp
;;; my-nums.el --- add a number to the square of pi

;; Package-Requires: ((haskell-emacs-pi "1.0.0"))

;;; Code:

(require 'haskell-emacs-pi)
(eval-when-compile (haskell-emacs-init))

;;;### autoload
(defun my-nums (arg)
  (+ arg (Pi.piSquare)))

;;; my-nums.el ends here
#+END_SRC

* Fancy Stuff
One of the mind bending aspects is that it supports as input and as
output type lisp expressions.  If you import Data.AttoLisp, you can
write functons of type Lisp -> Lisp.  The returned Lisp will be
evaluated (and not only returned) by emacs, so you can use
haskell-emacs as an macro-engine written in haskell.  It even allows
you to instruct emacs to do impure things, like moving the point,
apply an emacs function and call with the result of this function a
haskell-emacs function...
* Contribute
I highly encourage contributions of all sorts.  If you've got anything
that doesn't behave as you like or doesn't exist and you would like to
have it, let me know in an issue and I'll respond asap!
